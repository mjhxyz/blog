<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python神奇的装饰器</title>
    <link href="/2020/10/28/python%E7%A5%9E%E5%A5%87%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2020/10/28/python%E7%A5%9E%E5%A5%87%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">logger</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before...&#x27;</span>)<br>        res = func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> decorator<br><br><br><span class="hljs-meta">@logger</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func...&#x27;</span>)<br><br>func()<br></code></pre></td></tr></table></figure><h2 id="保存元数据"><a href="#保存元数据" class="headerlink" title="保存元数据"></a>保存元数据</h2><p>包装了以后，一些函数元数据就丢失了</p><ul><li><p><code>__name__</code></p></li><li><p><code>__doc__</code></p></li><li><p><code>__annotations__</code></p></li><li><p><code>__defaults__</code></p></li><li><p><code>__closure__</code></p></li><li><p>可以手动的进行设置，但是可能费事费力还不全</p></li><li><p>可以使用 <code>functions.update_wrapper</code> 方法，一次性将多个数据保留</p></li><li><p>可以使用 <code>@functools.wraps</code>,将元数据保留，不过底层也是 <code>upodate_wrapper</code>实现的</p></li><li><p>后两个方式还能使用 <code>__wrapper__</code> 属性获取原始被包装的方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">logger</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before...&#x27;</span>)<br>        res = func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> decorator<br><br><br><span class="hljs-meta">@logger</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func...&#x27;</span>)<br><br>func()<br></code></pre></td></tr></table></figure><h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><ul><li>带参数的装饰器本质上是一个装饰器工厂</li><li>工厂生产出来的装饰器才是真正给方法用的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">*ty_args, **ty_kwargs</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> wrap<br>    <span class="hljs-keyword">return</span> decorator<br><span class="hljs-meta">@a(<span class="hljs-params"><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func...&#x27;</span>)<br><br><br>xxx(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="不带括号的"><a href="#不带括号的" class="headerlink" title="不带括号的"></a>不带括号的</h2><p>实现一个装饰器 <code>c</code> 可以 <code>@c(a=1,b=2)</code>使用 也可以 <code>@c</code> 使用</p><p>简单的带参装饰器:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">e</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a=<span class="hljs-subst">&#123;a&#125;</span>, b=<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> e<br>    <span class="hljs-keyword">return</span> d<br><br><span class="hljs-meta">@c(<span class="hljs-params">a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这样的方式是正确的，但如果使用 <code>@c</code> 的方式，则会抛出异常</p><p>得利用装饰器的基本性质来分得</p><ul><li><code>func</code> 是放在装饰器的第一个参数传进来的</li><li>而现在的 <code>c</code> 不是一个装饰器，而是一个生产装饰器的工厂</li><li>实际的所用的装饰器是 <code>d</code></li><li>上述代码的本质使用应该如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">e</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a=<span class="hljs-subst">&#123;a&#125;</span>, b=<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> e<br>    <span class="hljs-keyword">return</span> d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br><br>f = c(a=<span class="hljs-number">2</span>,b=<span class="hljs-number">3</span>)(f)<br></code></pre></td></tr></table></figure></li><li>也就是说我们可以既把 <code>c</code> 当做装饰器工厂，又把 <code>c</code> 当做装饰器本身</li><li>什么时候当做工厂，什么时候当装饰器，由是否传入函数可以知道</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">method=<span class="hljs-literal">None</span>, *, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">e</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a=<span class="hljs-subst">&#123;a&#125;</span>, b=<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> e<br>    <span class="hljs-keyword">if</span> method <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> d<br>    <span class="hljs-keyword">return</span> d(method)<br><br><span class="hljs-meta">@c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还有另外一种更简单的写法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">method=<span class="hljs-literal">None</span>, *, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-keyword">if</span> method <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> partial(c, a=a, b=b)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">e</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a=<span class="hljs-subst">&#123;a&#125;</span>, b=<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">return</span> method(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> e<br><br><span class="hljs-meta">@c</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="装饰器类"><a href="#装饰器类" class="headerlink" title="装饰器类"></a>装饰器类</h2><p>可以先给类添加 <code>__call__</code> 方法: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before call...&#x27;</span>)<br>        res = self.func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after call...&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br><br><span class="hljs-meta">@A</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br>f()<br></code></pre></td></tr></table></figure><p>上面的代码确实可以成功运行，如果用于其他类方法的装饰器时候就会出错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br><span class="hljs-meta">    @A</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fb</span>(<span class="hljs-params">self, k</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fb&#x27;</span>)<br><br>b = B()<br>b.fb(<span class="hljs-number">1</span>)<br><br>TypeError: fb() missing <span class="hljs-number">1</span> required positional argument: <span class="hljs-string">&#x27;k&#x27;</span><br></code></pre></td></tr></table></figure><p>问题分析</p><ul><li>异常说是缺少 <code>k</code> 这个参数，但实际上我们已经传了</li><li>考虑到这是个实例变量，很有可能是因为 <code>self</code> 没有自动传入成功,传入的 <code>1</code> 交给了 <code>self</code> 变量，导致 <code>k</code> 没有找到</li><li>进一步分析，当 <code>A</code> 装饰器实例化的到时候，得到的 <code>fb</code> 并没有携带 <code>self</code></li><li>而只是单纯的 <code>B.fb</code>,所以这就导致了后面调用的时候，缺少 <code>self</code> 的问题</li></ul><p>解决思路:</p><ul><li>由于实例化 <code>A</code> 的时候，确实没有 <code>B</code> 的实例化对象，因此不应该在构造函数修改</li><li>再看看调用流程 <code>b.fb</code> 是 <code>A</code> 的一个实例, <code>b.fb()</code> 实际上在是在调用 调用 A的 <code>__call__</code>函数</li><li>而这时候的的 <code>a</code> 实例是绑定在 <code>b</code> 上面的</li><li>这样就好办了，此时可以考虑使用属性描述器协议，使用绑定方法进行调用</li><li>将当前实例 <code>b</code> 绑定到 实例(方法) <code>a</code>上面去调用, 这样每次 <code>a</code> 被调用的时候，<code>b</code> 实例都会是第一个,达到传递 <code>self</code> 的效果</li><li>但是为了兼容装饰的是普通函数，需要一次 <code>instance is Noe</code> 的判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before call...&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(*args, **kwargs)<br>        res = self.func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after call...&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, owner</span>):<br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self<br>        <span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType<br>        <span class="hljs-keyword">return</span> MethodType(self, instance)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br><span class="hljs-meta">    @A</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fb</span>(<span class="hljs-params">self, k</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fb&#x27;</span>)<br><br>b = B()<br>b.fb(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>To be continue….</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2020/10/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/10/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p></blockquote><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>最简单的设计模式。控制实例数目，节省系统资源的时候就可以使用<code>单例模式</code>,不过要注意线程安全问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Lock, Thread<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:<br>    __instance = <span class="hljs-literal">None</span><br>    __LOCK = Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;懒加载 &amp; 线程安全&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> cls.__instance:<br>            <span class="hljs-comment"># 先尝试判断是否已经实例化过了，再加锁，提升效率</span><br>            time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 模拟让出 CPU 的情况</span><br>            <span class="hljs-keyword">return</span> cls.__instance<br><br>        <span class="hljs-keyword">with</span> cls.__LOCK:<br>            <span class="hljs-keyword">if</span> cls.__instance:<br>                <span class="hljs-comment"># double check 防止实例化两次</span><br>                time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 模拟让出 CPU 的情况</span><br>                <span class="hljs-keyword">return</span> cls.__instance<br><br>            <span class="hljs-comment"># 实例化</span><br>            cls.__instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> cls.__instance<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_singleton</span>():<br>    <span class="hljs-built_in">print</span>(Singleton())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 并发条件下</span><br>    t1 = Thread(target=create_singleton)<br>    t2 = Thread(target=create_singleton)<br>    t1.start()<br>    t2.start()<br>    t1.join()<br>    t2.join()<br></code></pre></td></tr></table></figure><p>再根据 python 特点,可以整个装饰器来实现单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Lock, Thread<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">singleton</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-comment"># 创建锁</span><br>    cls.__LOCK = Lock()<br>    cls.__instance = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls.__instance:<br>            <span class="hljs-comment"># 先判断是否已经实例化，提升效率</span><br>            time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 模拟让出 CPU 的情况</span><br>            <span class="hljs-keyword">return</span> cls.__instance<br><br>        <span class="hljs-keyword">with</span> cls.__LOCK:<br>            <span class="hljs-keyword">if</span> cls.__instance:<br>                <span class="hljs-comment"># double check 防止实例化两次</span><br>                time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 模拟让出 CPU 的情况</span><br>                <span class="hljs-keyword">return</span> cls.__instance<br><br>            <span class="hljs-comment"># 实例化</span><br>            cls.__instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> cls.__instance<br>    <span class="hljs-comment"># 设置好方法</span><br>    cls.__new__ = new<br>    <span class="hljs-keyword">return</span> cls<br><br><br><span class="hljs-meta">@singleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>当一个对象被修改时，则会自动通知依赖它的对象。一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_observer</span>(<span class="hljs-params">self, observer</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;添加观察者&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_observer</span>(<span class="hljs-params">self, observer</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;移除指定的观察者&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">notify_all</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;通知所有观察者&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewsPaper</span>(<span class="hljs-title class_ inherited__">Subject</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.obs = <span class="hljs-built_in">set</span>()<br>        self.__news = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_observer</span>(<span class="hljs-params">self, observer</span>):<br>        self.obs.add(observer)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_observer</span>(<span class="hljs-params">self, observer</span>):<br>        self.obs.remove(observer)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">notify_all</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> ob <span class="hljs-keyword">in</span> self.obs:<br>            ob.on_update()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">news</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__news<br><br><span class="hljs-meta">    @news.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">news</span>(<span class="hljs-params">self, msg</span>):<br>        self.__news = msg<br>        <span class="hljs-comment"># 通知注册了的观察者</span><br>        self.notify_all()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Citizen</span>(<span class="hljs-title class_ inherited__">Observer</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sub, name</span>):<br>        self.sub = sub<br>        self.sub.add_observer(self)<br>        self.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>: 收到信息变化<span class="hljs-subst">&#123;self.sub.news&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sub = NewsPaper()<br><br>    obs1 = Citizen(sub, <span class="hljs-string">&#x27;a&#x27;</span>)<br>    obs2 = Citizen(sub, <span class="hljs-string">&#x27;b&#x27;</span>)<br><br>    sub.news = <span class="hljs-string">&#x27;下雨了&#x27;</span><br>    sub.news = <span class="hljs-string">&#x27;吃饭了&#x27;</span><br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment"># b: 收到信息变化下雨了</span><br><span class="hljs-comment"># a: 收到信息变化下雨了</span><br><span class="hljs-comment"># b: 收到信息变化吃饭了</span><br><span class="hljs-comment"># a: 收到信息变化吃饭了</span><br></code></pre></td></tr></table></figure><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p>作为两个不兼容的接口之间的桥梁，使得两个原本不能互相使用的类可以一起协作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PowerSource</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;电源提供&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_power</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery110V</span>(<span class="hljs-title class_ inherited__">PowerSource</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;110V电源&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_power</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">110</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Electric</span>:<br>    _rated_voltage = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, source: PowerSource</span>):<br>        self.source = source<br>        <span class="hljs-comment"># 开始供电</span><br>        self.__supply_power()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__supply_power</span>(<span class="hljs-params">self</span>):<br>        rv = self.__class__._rated_voltage<br>        <span class="hljs-keyword">if</span> self.source.get_power() != rv:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;需要电压为 <span class="hljs-subst">&#123;rv&#125;</span>V 的电源，但提供的是 <span class="hljs-subst">&#123;self.source.get_power()&#125;</span>V&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;电源供给正常!&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToyCar</span>(<span class="hljs-title class_ inherited__">Electric</span>):<br>    <span class="hljs-comment"># 玩具车所需电压为 220</span><br>    _rated_voltage = <span class="hljs-number">220</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleAdapter</span>(<span class="hljs-title class_ inherited__">PowerSource</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;两倍的变压器&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ps: PowerSource</span>):<br>        self.ps = ps<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_power</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.ps.get_power() * <span class="hljs-number">2</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 暂时只有 100v 的电压</span><br>    power110 = Battery110V()<br>    <span class="hljs-comment"># 使用一个电源适配器</span><br>    power220adapter = DoubleAdapter(power110)<br><br>    <span class="hljs-comment"># 出问题</span><br>    <span class="hljs-comment"># car = ToyCar(power110)</span><br><br>    <span class="hljs-comment"># 完美解决</span><br>    car = ToyCar(power220adapter)<br></code></pre></td></tr></table></figure><ul><li>适配器模式可以在保持原有的功能实现上，兼容新的需求。</li><li>但这只是一个<code>修复</code>问题的解决方案</li><li>最好能在一开始就规划好接口的设计，尽量少用适配器模式。</li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>提供了一种创建对象的方式,创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Database</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlDatabase</span>(<span class="hljs-title class_ inherited__">Database</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mysql: do_query()&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleDatabase</span>(<span class="hljs-title class_ inherited__">Database</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;oracle: do_query()&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MongoDatabase</span>(<span class="hljs-title class_ inherited__">Database</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mongo: do_query()&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseFactory</span>:<br>    __ALL_DB = &#123;<br>        <span class="hljs-string">&#x27;mysql&#x27;</span>: MysqlDatabase,<br>        <span class="hljs-string">&#x27;oracle&#x27;</span>: OracleDatabase,<br>        <span class="hljs-string">&#x27;mongo&#x27;</span>: MongoDatabase<br>    &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_db</span>(<span class="hljs-params">self, db_type</span>):<br>        DB = self.__class__.__ALL_DB.get(db_type)<br>        <span class="hljs-keyword">return</span> DB() <span class="hljs-keyword">if</span> DB <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    factory = DatabaseFactory()<br><br>    msql = factory.get_db(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br>    oracle = factory.get_db(<span class="hljs-string">&#x27;oracle&#x27;</span>)<br>    mongo = factory.get_db(<span class="hljs-string">&#x27;mongo&#x27;</span>)<br><br>    msql.do_query()<br>    oracle.do_query()<br>    mongo.do_query()<br></code></pre></td></tr></table></figure><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><blockquote><p>将生成具体产品的任务分发给具体的产品工厂,一个工厂只对应一个产品</p></blockquote><blockquote><p>好处就是不用通过指定类型来创建对象了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Database</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlDatabase</span>(<span class="hljs-title class_ inherited__">Database</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mysql: do_query()&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleDatabase</span>(<span class="hljs-title class_ inherited__">Database</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_query</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;oracle: do_query()&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseFactory</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_db</span>(<span class="hljs-params">self</span>) -&gt; Database:<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlFactory</span>(<span class="hljs-title class_ inherited__">DatabaseFactory</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_db</span>(<span class="hljs-params">self</span>) -&gt; Database:<br>        <span class="hljs-keyword">return</span> MysqlDatabase()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleFactory</span>(<span class="hljs-title class_ inherited__">DatabaseFactory</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_db</span>(<span class="hljs-params">self</span>) -&gt; Database:<br>        <span class="hljs-keyword">return</span> OracleDatabase()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    msql_factory = MysqlFactory()<br>    oracle_factory = OracleFactory()<br><br>    mysql = msql_factory.create_db()<br>    oracle = oracle_factory.create_db()<br></code></pre></td></tr></table></figure><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><blockquote><p>围绕一个规定好的抽象工厂，创建多个工厂，从而创建一系列的产品</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-comment"># ================ Land World ============</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>(<span class="hljs-title class_ inherited__">Vehicle</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;car&#x27;s running...&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bike</span>(<span class="hljs-title class_ inherited__">Vehicle</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bike&#x27;s running...&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rice</span>(<span class="hljs-title class_ inherited__">Food</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the rice was eaten...&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hamburger</span>(<span class="hljs-title class_ inherited__">Food</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the hamburger was eaten...&quot;</span>)<br><span class="hljs-comment"># ================ End Land World ============</span><br><br><br><span class="hljs-comment"># ================ Water World ============</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Submarine</span>(<span class="hljs-title class_ inherited__">Vehicle</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;submarine&#x27;s swimming...&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boat</span>(<span class="hljs-title class_ inherited__">Vehicle</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;boat&#x27;s swimming...&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>(<span class="hljs-title class_ inherited__">Food</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the fish was eaten...&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Crab</span>(<span class="hljs-title class_ inherited__">Food</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the crab was eaten...&quot;</span>)<br><span class="hljs-comment"># ================ End Water World ============</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WorldFactory</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_food</span>(<span class="hljs-params">self, food_name</span>) -&gt; Food:<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_vehicle</span>(<span class="hljs-params">self, vehicle_name</span>) -&gt; Vehicle:<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LandWorldFactory</span>(<span class="hljs-title class_ inherited__">WorldFactory</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_food</span>(<span class="hljs-params">self, food_name</span>):<br>        <span class="hljs-keyword">if</span> food_name == <span class="hljs-string">&#x27;rice&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Rice()<br>        <span class="hljs-keyword">elif</span> food_name == <span class="hljs-string">&#x27;hamburger&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Hamburger()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_vehicle</span>(<span class="hljs-params">self, vehicle_name</span>):<br>        <span class="hljs-keyword">if</span> vehicle_name == <span class="hljs-string">&#x27;bike&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Bike()<br>        <span class="hljs-keyword">elif</span> vehicle_name == <span class="hljs-string">&#x27;car&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Car()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WaterWorldFactory</span>(<span class="hljs-title class_ inherited__">WorldFactory</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_food</span>(<span class="hljs-params">self, food_name</span>):<br>        <span class="hljs-keyword">if</span> food_name == <span class="hljs-string">&#x27;fish&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Fish()<br>        <span class="hljs-keyword">elif</span> food_name == <span class="hljs-string">&#x27;crab&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Crab()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_vehicle</span>(<span class="hljs-params">self, vehicle_name</span>):<br>        <span class="hljs-keyword">if</span> vehicle_name == <span class="hljs-string">&#x27;submarine&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Submarine()<br>        <span class="hljs-keyword">elif</span> vehicle_name == <span class="hljs-string">&#x27;boat&#x27;</span>:<br>            <span class="hljs-keyword">return</span> Boat()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryProducer</span>:<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_world_factory</span>(<span class="hljs-params">cls, world_type</span>):<br>        <span class="hljs-keyword">if</span> world_type == <span class="hljs-string">&#x27;land&#x27;</span>:<br>            <span class="hljs-keyword">return</span> LandWorldFactory()<br>        <span class="hljs-keyword">if</span> world_type == <span class="hljs-string">&#x27;water&#x27;</span>:<br>            <span class="hljs-keyword">return</span> WaterWorldFactory()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    factory = FactoryProducer.get_world_factory(<span class="hljs-string">&#x27;land&#x27;</span>)<br>    food1 = factory.get_food(<span class="hljs-string">&#x27;rice&#x27;</span>)<br>    food2 = factory.get_food(<span class="hljs-string">&#x27;hamburger&#x27;</span>)<br>    food1.eat()<br>    food2.eat()<br>    v1 = factory.get_vehicle(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    v2 = factory.get_vehicle(<span class="hljs-string">&#x27;bike&#x27;</span>)<br>    v1.move()<br>    v2.move()<br></code></pre></td></tr></table></figure><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><blockquote><p>允许向一个现有的对象添加新的功能，同时又不改变其结构</p></blockquote><p>场景: 当前有个可以每次读一个字符的类，现在需要一次可以读一行的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterable<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Readable</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IterReader</span>(<span class="hljs-title class_ inherited__">Readable</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, <span class="hljs-built_in">iter</span>: Iterable</span>):<br>        self.<span class="hljs-built_in">iter</span> = <span class="hljs-built_in">iter</span>.__iter__()<br>        self.tmp = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">iter</span>.__next__()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedIterReader</span>(<span class="hljs-title class_ inherited__">Readable</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, reader: Readable</span>):<br>        self.reader = reader<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;直接使用被包装的实现&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.reader.read()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_line</span>(<span class="hljs-params">self</span>):<br>        res, cur = [], self.read()<br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-string">&#x27;\n&#x27;</span>:<br>            res.append(cur)<br>            cur = self.read()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(res)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    r = IterReader(<span class="hljs-string">&#x27;abc\ndefg\ndfdsfasdf\n&#x27;</span>)<br>    b = BufferedIterReader(r)<br>    <span class="hljs-built_in">print</span>(b.read_line())<br>    <span class="hljs-built_in">print</span>(b.read_line())<br>    <span class="hljs-built_in">print</span>(b.read_line())<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-comment"># abc</span><br><span class="hljs-comment"># defg</span><br><span class="hljs-comment"># dfdsfasdf</span><br></code></pre></td></tr></table></figure><p>装饰器模式使用了组合来代替了继承，避免了子类膨胀，同时耦合度也很小。</p><p>场景: 为一个函数添加一些切面功能，例如打印日志，计算函数消耗时间</p><h2 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Filter</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">before</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">after</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-title class_ inherited__">Filter</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">before</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[logger] &#x27;<span class="hljs-subst">&#123;func_name&#125;</span>&#x27; called with params: <span class="hljs-subst">&#123;args&#125;</span> <span class="hljs-subst">&#123;kwargs&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>(<span class="hljs-title class_ inherited__">Filter</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.start = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">before</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        self.start = time.time()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">after</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[timer] function cost: <span class="hljs-subst">&#123;time.time() - self.start&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterChain</span>(<span class="hljs-title class_ inherited__">Filter</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *fs</span>):<br>        self.__filters = fs<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">filters</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            self.before(func.__name__, *args, **kwargs)<br>            res = func(*args, **kwargs)<br>            self.after(func.__name__, *args, **kwargs)<br>            <span class="hljs-keyword">return</span> res<br>        <span class="hljs-keyword">return</span> decorator<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">after</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> self.__filters:<br>            f.after(func_name, *args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">before</span>(<span class="hljs-params">self, func_name, *args, **kwargs</span>):<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> self.__filters:<br>            f.before(func_name, *args, **kwargs)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    filter_chain = FilterChain(Logger(), Timer())<br><br><span class="hljs-meta">    @filter_chain.filters</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a, b</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i&#x27;m func.&quot;</span>)<br>        <span class="hljs-keyword">return</span> a + b<br><br>    <span class="hljs-built_in">print</span>(func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><blockquote><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开灯&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关电视&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开电视&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关灯.&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开电脑&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关电脑&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.tv = TV()<br>        self.light = Light()<br>        self.computer = Computer()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>        self.tv.<span class="hljs-built_in">open</span>()<br>        self.light.<span class="hljs-built_in">open</span>()<br>        self.computer.<span class="hljs-built_in">open</span>()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        self.tv.close()<br>        self.light.close()<br>        self.computer.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    manger = Manager()<br><br>    manger.close()<br>    manger.<span class="hljs-built_in">open</span>()<br></code></pre></td></tr></table></figure><p>提供了一键打开一键关闭的功能</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>一个类的行为或其算法可以在运行时更改</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Strategy</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddStrategy</span>(<span class="hljs-title class_ inherited__">Strategy</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> a+b<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubStrategy</span>(<span class="hljs-title class_ inherited__">Strategy</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> a - b<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Operator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, strategy=<span class="hljs-literal">None</span></span>):<br>        self.__stg = strategy<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> strategy:<br>            self.__stg = AddStrategy()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strategy</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__stg<br><br><span class="hljs-meta">    @strategy.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strategy</span>(<span class="hljs-params">self, stg: Strategy</span>):<br>        self.__stg = stg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_operator</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> self.__stg.do(a, b)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    op = Operator()<br><br>    op.strategy = AddStrategy()<br>    <span class="hljs-built_in">print</span>(op.do_operator(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><br>    op.strategy = SubStrategy()<br>    <span class="hljs-built_in">print</span>(op.do_operator(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote><p>比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问，直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层</p></blockquote><p>以下是 <code>Cache代理</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">msg</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteMessage</span>(<span class="hljs-title class_ inherited__">Message</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, location</span>):<br>        self.__uri = location<br>        self.__msg = self.__do_request()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__do_request</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;request from <span class="hljs-subst">&#123;self.__uri&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;msg from <span class="hljs-subst">&#123;self.__uri&#125;</span>&quot;</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">msg</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__msg<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CachedMessage</span>(<span class="hljs-title class_ inherited__">Message</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, location</span>):<br>        self.__uri = location<br>        self.__msg = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">msg</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.__msg <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.__msg = RemoteMessage(self.__uri)<br>        <span class="hljs-keyword">return</span> self.__msg.msg<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    msg = CachedMessage(<span class="hljs-string">&#x27;127.0.0.1/test&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(msg.msg)<br>    <span class="hljs-built_in">print</span>(msg.msg)<br>    <span class="hljs-built_in">print</span>(msg.msg)<br></code></pre></td></tr></table></figure><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><blockquote><p>用于顺序访问集合对象的元素，不不关心集合对象的底层表示</p></blockquote><p>自己实现的迭代器模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Iterator</span>(metaclass=ABCMeta):<br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span>(<span class="hljs-title class_ inherited__">Iterator</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> self.index &lt; <span class="hljs-built_in">len</span>(self.args)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.has_next():<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;No element remained.&#x27;</span>)<br>        res = self.args[self.index]<br>        self.index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args</span>):<br>        self.args = args<br>        self.index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">iterator</span>(<span class="hljs-params">self</span>) -&gt; Iterator:<br>        <span class="hljs-keyword">return</span> self<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    c = Collection(*[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">while</span> c.has_next():<br>        <span class="hljs-built_in">print</span>(c.<span class="hljs-built_in">next</span>())<br></code></pre></td></tr></table></figure><p>使用 <code>python</code> 自带的迭代机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args</span>):<br>        self.args = args<br>        self.index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.index &gt;= <span class="hljs-built_in">len</span>(self.args):<br>            <span class="hljs-keyword">raise</span> StopIteration()<br>        res = self.args[self.index]<br>        self.index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> Collection(*[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]):<br>        <span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></table></figure><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>状态模式和策略模式非常的相似，不同点是，状态的转换是自动，无意识的，而策略模式的策略变换是手动，主观的去改变的</p><p>有一个场景，模拟食堂吃饭的不同状态和不同的行为</p><ul><li>给饭<ul><li>没付钱状态: 请先给钱</li><li>付了钱状态: 开始做饭,请等待</li><li>在做饭状态: 在做饭了，别催</li><li>售罄状态: 没饭了再见</li></ul></li><li>收钱<ul><li>没付钱状态: 付钱成功!</li><li>付了钱状态: 请不要重复付钱</li><li>在做饭状态: 在做饭了，别给钱了</li><li>售罄状态: 没饭了，别给了</li></ul></li><li>退钱<ul><li>没付钱状态: 没付钱还想退钱？</li><li>付了钱状态: 退款成功</li><li>在做饭状态: 都在做饭,不能退</li><li>售罄状态: 你想多了</li></ul></li><li>发饭<ul><li>没付钱状态: 请先去买饭</li><li>付了钱状态: </li><li>在做饭状态: 好了好了给你饭</li><li>售罄状态: 没饭给你了</li></ul></li></ul><p>经过简单思考一后，有可能写出以下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python神奇的迭代</title>
    <link href="/2020/09/25/python%E7%A5%9E%E5%A5%87%E7%9A%84%E8%BF%AD%E4%BB%A3/"/>
    <url>/2020/09/25/python%E7%A5%9E%E5%A5%87%E7%9A%84%E8%BF%AD%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-神奇的迭代"><a href="#Python-神奇的迭代" class="headerlink" title="Python 神奇的迭代"></a>Python 神奇的迭代</h1><h2 id="迭代器使用"><a href="#迭代器使用" class="headerlink" title="迭代器使用"></a>迭代器使用</h2><p>迭代器基本使用，就如下代码一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></table></figure><h2 id="for-in-原理"><a href="#for-in-原理" class="headerlink" title="for in 原理"></a>for in 原理</h2><p>使用 <code>for n in xx</code> 时</p><ul><li>要求循环迭代的对象必须得是 <code>collections.Iterable</code>(可迭代对象) 的一个实例</li><li>然后使用内置方法 <code>inter(xx)</code> 获取到<code>迭代器</code>由可迭代器对象生成</li><li>本质上调用了 <code>xx.__iter__()</code> 方法, 这也是 <code>Iterable</code> 的抽象方法</li><li>拿到的迭代器才是真正迭代</li><li>传入 next 中调用 <code>next(it)</code> 则会调用 <code>it.__next__()</code> 方法</li><li>当 <code>next(it)</code> 一直调用到没有元素的时候，会抛出 <code>StopIteration</code> 异常</li></ul><p>注意的是</p><ul><li>迭代器只能用一次，下次用重新生成</li><li>两个迭代器之间没有干扰</li><li>迭代器也可以用 <code>for</code> 遍历,说明迭代器对象也是可迭代对象，只不过返回了 <code>self</code></li></ul><h2 id="撸一个可迭代对象"><a href="#撸一个可迭代对象" class="headerlink" title="撸一个可迭代对象"></a>撸一个可迭代对象</h2><p>场景:</p><p>用户对象有自己的一些属性，比如说姓名，年龄，性别。现在希望能对用户对象遍历，获取用户对象的相关信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, gender</span>):<br>        self.name = name<br>        self.age = age<br>        self.gender = gender<br>        self.index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        self.index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self.index &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br>        <span class="hljs-keyword">if</span> self.index == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> self.name<br>        <span class="hljs-keyword">elif</span> self.index == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> self.age<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.gender<br><br><br>a = User(<span class="hljs-string">&#x27;mao&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;n&#x27;</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(n)<br>        <br></code></pre></td></tr></table></figure><p>相当于用户对象自己是可迭代对象，同时也是迭代器，当然创建一个专门当迭代器的类也可以。</p><p>上面的代码是我们手动使用了一个 <code>index</code> 变量来维护迭代器。也可以用生成器来自动维护得带器 如下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, gender</span>):<br>        self.name = name<br>        self.age = age<br>        self.gender = gender<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">yield</span> self.name<br>        <span class="hljs-keyword">yield</span> self.age<br>        <span class="hljs-keyword">yield</span> self.gender<br></code></pre></td></tr></table></figure><h2 id="反向迭代"><a href="#反向迭代" class="headerlink" title="反向迭代"></a>反向迭代</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>有一个变量 <code>a = [1, 2, 3, 4, 5]</code>,要对这个变量进行反向迭代操作</p><ul><li>使用 <code>a.reverse()</code> 方法,将 a 逆序再迭代，但修改了源数组</li><li>使用切片操作 <code>a[::-1]</code> 得到新的逆序列表，再迭代,但浪费的空间</li><li>正常操作需要使用内置函数 <code>reversed</code>:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">k = <span class="hljs-built_in">reversed</span>(a)  <span class="hljs-comment"># 会得到反向迭代器对象,和 inter() 刚好想法</span><br><br><span class="hljs-comment"># 但传入 reversed 的函数的实例必须实现 __reversed__ 方法</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="整一个支持反向迭代的类"><a href="#整一个支持反向迭代的类" class="headerlink" title="整一个支持反向迭代的类"></a>整一个支持反向迭代的类</h3><p>直接在上面的普通迭代对象加一个 <code>__reversed__</code> 方法即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, gender</span>):<br>        self.name = name<br>        self.age = age<br>        self.gender = gender<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">yield</span> self.name<br>        <span class="hljs-keyword">yield</span> self.age<br>        <span class="hljs-keyword">yield</span> self.gender<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reversed__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">yield</span> self.gender<br>        <span class="hljs-keyword">yield</span> self.age<br>        <span class="hljs-keyword">yield</span> self.name<br><br><br>u = User(<span class="hljs-string">&#x27;mao&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;n&#x27;</span>)<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(u):<br>    <span class="hljs-built_in">print</span>(v)<br></code></pre></td></tr></table></figure><h2 id="Iterable-进行切片操作"><a href="#Iterable-进行切片操作" class="headerlink" title="Iterable 进行切片操作"></a>Iterable 进行切片操作</h2><h3 id="切片操作使用"><a href="#切片操作使用" class="headerlink" title="切片操作使用"></a>切片操作使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(n)<br><span class="hljs-comment"># 输出 3 4 5</span><br></code></pre></td></tr></table></figure><h3 id="切片实现"><a href="#切片实现" class="headerlink" title="切片实现"></a>切片实现</h3><ul><li><code>[]</code> 运算符重载的方法是 <code>__getitem__</code> 即 <code>a[2]</code> &lt;=&gt; <code>a.__getitem__</code></li><li><code>[]</code> 切片也是一样的, <code>a[2:4:1]</code> &lt;=&gt; <code>a.__getitem__(slice(2,4[,1]))</code><ul><li><code>slice</code> 是 python 的一个内置函数</li><li>参数为 起始值，结束值，步进</li></ul></li><li>使用 <code>itertools.islice()</code> 方法, 将一个<code>可迭代</code>对象转换为一个<code>切片对象</code></li><li>切片对象也可迭代</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> n<br>        n += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> islice<br><br>s = islice(counter(<span class="hljs-number">0</span>), <span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 输出 100 - 199 的数</span><br></code></pre></td></tr></table></figure><p><strong>islice 原理</strong></p><ul><li>从最前开始依次读取数据，但不返回数据</li><li>直到<code>起始值</code>的时候，才开始返回结果</li><li>超过了<code>结束值</code>,就结束</li></ul><h3 id="实现一个-islice"><a href="#实现一个-islice" class="headerlink" title="实现一个 islice"></a>实现一个 islice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> n<br>        n += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mslice</span>(<span class="hljs-params">it, s, e, j=<span class="hljs-number">1</span></span>):<br>    cur = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> cur &lt; e:<br>        d = <span class="hljs-built_in">next</span>(it)<br>        <span class="hljs-keyword">if</span> cur &gt;= s:<br>            <span class="hljs-comment"># 此时 s &lt;= cur &lt; s 符合要求</span><br>            <span class="hljs-keyword">yield</span> d<br>        cur += <span class="hljs-number">1</span><br><br><br>s = mslice(counter(<span class="hljs-number">0</span>), <span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 一样输出 100 - 199 的数</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDN基础</title>
    <link href="/2020/09/25/CDN%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/25/CDN%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CDN-基础"><a href="#CDN-基础" class="headerlink" title="CDN 基础"></a>CDN 基础</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="CDN-分发架构"><a href="#CDN-分发架构" class="headerlink" title="CDN 分发架构"></a>CDN 分发架构</h3><p>全球有许多数据中心，不管在哪，不远处基本上都有数据中心。</p><p>可以在这些数据中心中部署一些机器，形成一个缓存的集群来缓存部分数据，这样用户访问的时候，就可以就近访问了。</p><p>这些分布在各个数据中心的节点,被称为<code>边缘节点</code>。</p><p>由于边缘节点数量很多，但每个集群规模比较小，不可能缓存下所有东西，也就会有无法命中的情况，测试在边缘节点之上有规模更大的<code>区域节点</code>，缓存的数据更多，命中率也更大。在区域节点之上还有<code>中心节点</code>缓存的数据进一步加大。如果还未命中就只好回源网站访问了。</p><pre><code class=" mermaid">graph TB中心节点--&gt;A(区域节点)中心节点--&gt;B(区域节点)中心节点--&gt;C(区域节点)A--&gt;D(边缘节点)A--&gt;E(边缘节点)B--&gt;F(边缘节点)B--&gt;G(边缘节点)C--&gt;H(边缘节点)C--&gt;I(边缘节点)</code></pre><p>如图所示，就是 CDN 的分发系统架构。 CDN 缓存是一层一层的，尽可能的不去请求源站点</p><h3 id="访问边缘节点"><a href="#访问边缘节点" class="headerlink" title="访问边缘节点"></a>访问边缘节点</h3><p>和 DNS 的全局负载均衡类似， CDN 分发网络也是分布在多个区域、运营商的情况。</p><h4 id="没有-CDN-的情况"><a href="#没有-CDN-的情况" class="headerlink" title="没有 CDN 的情况"></a>没有 CDN 的情况</h4><ul><li>客户端访问 <code>xxx.com</code> 客户端请求本地 DNS 服务器</li><li>本地 DNS 如有缓存，则返回网站地址，否则递归查询到网站<code>权威域名服务器</code></li><li>权威域名服务器返回 <code>xxx.com</code> 的 ip 地址，本地服务器缓存</li><li>本地 DNS 服务器返回给客户端 ip 地址</li><li>客户端直接访问 ip 地址</li></ul><h4 id="有了-CDN"><a href="#有了-CDN" class="headerlink" title="有了 CDN"></a>有了 CDN</h4><p>情况发生了巨大的变化</p><p><strong>基本流程</strong></p><ul><li>权威 DNS 服务器会设置一个 <code>CNAME</code>, 指向另外一个域名 <code>xxx.cdn.com</code>,返回给 本地 DNS 服务器</li><li>本地 DNS 拿到这个域名以后，还需要继续解析这个新的域名,此时访问的就不是 <code>xxx.com</code> 的权威 DNS 服务器了,而是 <code>xxx.cdn.com</code> 的权威 DNS 服务器</li><li>在这服务器上还是会设置一个 <code>CNAME</code> 指向另外一个域名, 也即 CDN 网络的<code>全局 负载均衡器</code></li><li>然后本地 DNS 服务器去请求 CDN 的全局负载均衡器，全局负载均衡器会选择一台最合适的缓存服务器提供服务，其主要判断指标有:<ul><li>ip 地址 - 近距离的服务器</li><li>用户所处运营商</li><li>URL 携带内容，判断哪个服务器缓存了所需内容</li><li>当前各个服务器的负载情况</li></ul></li><li>分析完成以后，全局服务器则会返回服务器的 ip 地址</li><li>本地 DNS 就会缓存这个 ip, 客户端去访问这个边缘节点，下载资源</li><li>如果服务器上并没有用户所需的资源，则向<code>上级</code>缓存服务器请求内容，直至到<code>源服务器</code>，将内容获取</li></ul><h2 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a>存储内容</h2><p>比较适合存储长时间不变的资源，比如静态页面，图片</p><h2 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h2><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><h4 id="使用-refer-头"><a href="#使用-refer-头" class="headerlink" title="使用 refer 头"></a>使用 refer 头</h4><p>使用 HTTP 头的 refer 字段，浏览器发送请求，一般带上 refer 告诉服务器是从哪个页面跳转过来的，如果 refer 不是来自运行的站点，就禁止访问，</p><p>但 refer 机制很容易被破解</p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>和 CDN 厂商规定一个加密字符串，客户端使用截止时间戳，访问的资源路径，加密字符串进行签名，得到一个新的字符串，然后生成新的访问链接，即带上签名的访问链接去访问 CDN</p><p>CDN 服务端取出截止时间，和当前 CDN 节点时间进行比较判断是否过期。除此之外还要根据相同的签名算法重新签名一遍，如果签名结果相同，才将资源返回给用户。</p><h2 id="动态数据缓存"><a href="#动态数据缓存" class="headerlink" title="动态数据缓存"></a>动态数据缓存</h2><h3 id="边缘计算模式"><a href="#边缘计算模式" class="headerlink" title="边缘计算模式"></a>边缘计算模式</h3><p>数据是动态生成的，数据的<code>逻辑计算和存储</code>也可以放在边缘节点上。定时从源数据同步<code>存储的数据</code>，然后在边缘节点计算得到结果。</p><p>既然没办法事先做好缓存，那就将生成逻辑直接放在用户的附近，既可以当场出结果，又能就近提供结果</p><h3 id="路径优化模式"><a href="#路径优化模式" class="headerlink" title="路径优化模式"></a>路径优化模式</h3><p>数据不在边缘生成,而是在<code>源站点</code>生成，但<code>数据下发确实通过 CDN 网络</code>,对路径进行优化。</p><ul><li>由于 CDN 节点较多，能找到<code>离源站近</code>的边缘节点，也能找到离用户很久的边缘节点。中间链路完全由 CDN 来规划，选择一个更加快速，可靠的类似于<code>专线</code>的方式进行访问</li><li>对于 TCP 连接公网传输常会丢数据，导致 TCP 窗口始终很小，发送速度上不去。根据 TCP 的流量控制和拥塞控制原理，在 CDN 加速网络中，可以调整 TCP 参数，使得 TCP 能更加激进的传数据</li><li>也可以多个请求服用一个 TCP 链接，保证每次动态请求到达时，连接都已经建立了。不必临时三次握手或<br>者建立过多的连接，增加服务器的压力。</li><li>另外，可以通过对传输数据进行<code>压缩</code>，增加传输效率。</li></ul>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS</title>
    <link href="/2020/09/25/DNS/"/>
    <url>/2020/09/25/DNS/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h2><p>访问 <a href="http://www.163.com/">www.163.com</a></p><pre><code class=" mermaid">graph LR客户端--1--&gt;本地DNS本地DNS--2--&gt;本地DNS缓存本地DNS--3--&gt;根域名服务器根域名服务器--4--&gt;本地DNS本地DNS--5--&gt;.com顶级域名服务器.com顶级域名服务器--6--&gt;本地DNS本地DNS--7--&gt;权威域名服务器权威域名服务器--8--&gt;本地DNS本地DNS--9--&gt;客户端</code></pre><ul><li>客户端发送 DNS 请求给<code>本地域名服务器</code><ul><li>本地域名服务器 可以是服务商提供的 也可以配置为公共 DNS</li></ul></li><li>本地 <code>DNS</code> 收到请求后,如果在其缓存中能找到目标域名的 ip ,则直接返回 ip<ul><li>否则本地 DNS 回去询问根<code>域名服务器</code></li><li><code>根域名</code>不直接用于域名解析，但会返回<code>顶级域名服务器</code>的地址</li><li>比如 <code>www.163.com</code> 由 <code>.com</code> 管理，返回 <code>.com</code>的顶级服务器地址</li><li>顶级域名服务器负责管理二级域名</li></ul></li><li>本地 DNS 此时就向收到的顶级域名服务器发送请求</li><li>顶级域名收到请求以后,返回负责 <code>www.163.com</code> 的<code>权威DNS服务器</code>的地址</li><li>本地 DNS 服务器又去询问权威 DNS 服务器</li><li>权威 DNS 服务器查询到了以后，将对应的 ip 地址返回给本地 DNS 服务器</li><li>本地 DNS 再将结果返回给客户端</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="本地负载均衡"><a href="#本地负载均衡" class="headerlink" title="本地负载均衡"></a>本地负载均衡</h3><blockquote><p>本地负载均衡针对本地范围的服务器群做负载均衡</p></blockquote><p>客户端需要访问一个应用时，应该配置这个应用的<code>域名</code>而不是 <code>ip</code> 地址。如果由于一些原因改应用要换到其他的机器上，如果多个客户端都使用了这个应用，则修改起来非常麻烦。但如果配置的是域名，则修改 DNS 服务器里的<code>映射关系</code>即可。</p><p>在这基础之上,配置的应用被访问的快撑不住的时候，可以部署<code>多个应用</code>，并且在域名解析的时候，只要配置访问策略，比如说第一次返回第一个，第二次返回第二个，这样就实现了负载均衡。</p><h3 id="全局均衡负载"><a href="#全局均衡负载" class="headerlink" title="全局均衡负载"></a>全局均衡负载</h3><blockquote><p>全局负载均(GSLB)衡针对不同地理位置、不同网络结构的服务器群做负载均衡</p></blockquote><pre><code class=" mermaid">graph LRA((客户端))--1--&gt;本地DNS本地DNS--2--&gt;本地DNS缓存本地DNS--3--&gt;根域名服务器本地DNS--4--&gt;.com顶级域名服务器本地DNS--5--&gt;权威域名服务器本地DNS--6--&gt;A本地DNS--7--&gt;全局负载均衡器1本地DNS--8--&gt;全局负载均衡器2</code></pre><ul><li>客户端访问 <code>aa.bb.com</code> 的时候,需要将域名转换为 <code>IP</code> 来进行访问</li><li>本地 DNS 先查看是否有缓存这个记录，如果有则直接使用，否则递归的查询一遍</li><li>最终会查到 <code>aa.bb.com</code> 的`权威域名服务器</li></ul><p>对于不需要做 GSLB 的简单应用来说,权威服务器可以将这个域名解析为多个 IP 地址，客户端自己简单的轮询访问，做到均衡负载</p><p>对于复杂的，夸地区运营商的应用，则需要 GSLB 机制，因而需要专门的设备、服务器来做，这就是<code>全局负载均衡器</code></p><p>在 <code>aa.bb.com</code> 的 DNS 中一般通过配置 <code>CNAME</code> 的方式,给 <code>aa.bb.com</code> 起一个别名，比如 <code>aa.xx.bb.com</code> 然后让 本地 DNS 服务器去请求这个域名， GSLB就可以在解析这个域名的过程中，通过自己的策略实现均衡负载</p><p>GSLB 也可以分为多层,如上图所示:</p><ul><li>两层 GSLB 希望用户访问相同运营商机房中资源，不跨运营商，提高吞吐量</li><li>第一层 GSLB ，通过查看本地 DNS 所在运营商，就是用户所在运营商，假设是 联通 ,通过 CNAME 的方式，使用另外一个别名 <code>aa.lt.bb.com</code> 告诉本地 GSLB 去请求第二层 GSLB</li><li>第二层 GSLB, 通过查看本地 DNS 所在地址，就知道用户的大致地理区域，然后再找到距离用户比较近的存储节点地址，返回给本地 DNS 服务</li></ul><p>本地 DNS 拿到结果后，返回给客户端，客户端就可以进行访问了。</p>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP缓存</title>
    <link href="/2020/09/25/HTTP%E7%BC%93%E5%AD%98/"/>
    <url>/2020/09/25/HTTP%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h1><p>客户端每次都请求服务器，流量消耗大，并且服务器也有压力</p><p>缓存主要针对 <code>css</code> <code>js</code> <code>图片</code> 这些更新频率不大的静态资源文件</p><h2 id="缓存头部"><a href="#缓存头部" class="headerlink" title="缓存头部"></a>缓存头部</h2><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>请求 &amp; 响应头， 缓存控制字段</p><table><thead><tr><th>值</th><th>作用</th></tr></thead><tbody><tr><td>no-store</td><td>所有内容不缓存</td></tr><tr><td>no-cache</td><td>缓存,但使用缓存之前需要请求服务器判断资源是否是最新</td></tr><tr><td>max-age=x(秒)</td><td>请求缓存后的x秒内不在发起请求</td></tr><tr><td>s-maxage=x(秒)</td><td>代理服务器请求源站缓存后x秒内不在发起请求，只对CDN有效</td></tr><tr><td>public</td><td>客户端和代理服务器(CDN)都可缓存</td></tr><tr><td>private</td><td>只有客户端可以缓存</td></tr></tbody></table><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><ul><li>响应头</li><li>代表缓存资源过期时间，由服务器提供</li><li><code>HTTP1.0</code> 的属性, 比 <code>max-age</code> 优先级低</li></ul><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><ul><li>响应头</li><li>标识资源最新修改时间,由服务器提供</li></ul><h3 id="If-Midified-Since"><a href="#If-Midified-Since" class="headerlink" title="If-Midified-Since"></a>If-Midified-Since</h3><ul><li>请求头</li><li>资源最新的修改时间</li><li>和 <code>Last-Modified</code> 一对,会进行对比，判断要不要重新发送资源请求</li></ul><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><ul><li>响应头</li><li>资源唯一标识，由服务器提供</li></ul><h3 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h3><ul><li>请求头,缓存资源标识</li><li>由浏览器提供给服务器 (其实就是上一次服务器给的Etag) 和 Etag 是一对，会进行比较</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="服务器和浏览器约定一个过期时间-Expires"><a href="#服务器和浏览器约定一个过期时间-Expires" class="headerlink" title="服务器和浏览器约定一个过期时间 Expires"></a>服务器和浏览器约定一个过期时间 Expires</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><pre><code class=" mermaid">sequenceDiagram客户端-&gt;&gt;服务端: 请求 x.js服务端-&gt;&gt;客户端: x.js &amp; Expires客户端-&gt;&gt;客户端: Expires 没过期，使用本地缓存客户端-&gt;&gt;服务端: Expires 过期，请求服务端服务端-&gt;&gt;客户端: x.js &amp; Expires</code></pre><ul><li>浏览器向服务器请求 <code>x.js</code> 文件</li><li>服务器将 <code>x.js</code> 响应回客户端,并约定一个时间 <code>Expires</code></li><li>后续请求的时候，浏览器先对比一下当前时间是否大于了约定的 <code>Expires</code></li><li>如果时间没过，则用本地的缓存，否则才发送请求 </li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>如果 <code>Expires</code> 已经过期，浏览器再次请求服务器，但实际上文件并没有变化,就白请求了</li></ul><h3 id="在约定文件过期的基础上，加上最新文件修改时间-Last-Modified-amp-If-Modified-Since-来进行对比"><a href="#在约定文件过期的基础上，加上最新文件修改时间-Last-Modified-amp-If-Modified-Since-来进行对比" class="headerlink" title="在约定文件过期的基础上，加上最新文件修改时间 (Last-Modified &amp; If-Modified-Since) 来进行对比"></a>在约定文件过期的基础上，加上最新文件修改时间 (Last-Modified &amp; If-Modified-Since) 来进行对比</h3><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><pre><code class=" mermaid">sequenceDiagram客户端-&gt;&gt;服务端: 请求 x.js服务端-&gt;&gt;客户端: x.js + Expires + Last-Modifed客户端-&gt;&gt;客户端: Expires 没过期，使用本地缓存客户端-&gt;&gt;服务端: Expires 过期，请求服务端 带上 Last-Modified服务端-&gt;&gt;客户端: 返回 304 Not Modified 如果 Last-Modifieid = 资源的修改时间服务端-&gt;&gt;客户端: 否则返回 x.js + Expires + Last-Modified</code></pre><ul><li>浏览器向服务器请求 <code>x.js</code> 文件</li><li>服务器将 <code>x.js</code> 响应回客户端,并约定一个时间 <code>Expires</code>, 并且将 <code>Last-Modified</code>带上</li><li>接下来就分情况了</li><li><code>Expires</code> 没有过期<ul><li> 浏览器进行使用本地缓存</li></ul></li><li><code>Expires</code> 过期以后<ul><li>请求资源，带上 <code>If-Modified-Since</code></li><li>服务器将 <code>If-Modified-Since</code> 的时间和文件的修改时间进行对比</li><li>如果不相等，则服务器会去查找最新文件+返回<code>Last-Modified</code></li><li>如果相等，则返回 <code>304 Not Modified</code> 响应</li></ul></li></ul><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ul><li>浏览器可以随意修改 <code>Expires</code></li><li>由于 <code>Last-Modified</code> 只能精确到秒,极端情况下<ul><li>假设文件是在 1s 内发生变化</li><li>则 <code>Last-Modified</code> 无法感知文件的变化</li><li>浏览器<code>永远拿不到</code>最新的文件</li></ul></li></ul><h3 id="改为返回-max-age-Etag-amp-If-None-Match"><a href="#改为返回-max-age-Etag-amp-If-None-Match" class="headerlink" title="改为返回 max-age +  Etag &amp; If-None-Match"></a>改为返回 <code>max-age</code> +  <code>Etag &amp; If-None-Match</code></h3><h4 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h4><pre><code class=" mermaid">sequenceDiagram客户端-&gt;&gt;服务端: 请求 x.js服务端-&gt;&gt;客户端: x.js + max-age + Etag客户端-&gt;&gt;客户端: max-age 没过期，使用本地缓存客户端-&gt;&gt;服务端: max-age 过期，请求服务端 带上 If-None-Match服务端-&gt;&gt;客户端: 返回 304 Not Modified 如果 If-None-Match = 资源当前的标志服务端-&gt;&gt;客户端: 否则返回 x.js + max-age + Etag</code></pre><ul><li>浏览器向服务器请求 <code>x.js</code> 文件</li><li>服务器将 <code>x.js</code> 响应回客户端,并约定一个过期时间 <code>max-age</code>, 并且将 <code>Etag</code>带上</li><li>接下来就分情况了</li><li><code>max-age</code> 没有过期<ul><li> 浏览器进行使用本地缓存</li></ul></li><li><code>max-age</code> 过期以后<ul><li>请求资源，带上 <code>If-None-Match</code></li><li>服务器将 <code>If-None-Match</code> 的时间和文件的修改时间进行对比</li><li>如果不相等，则服务器会去查找最新文件+返回新的<code>Etag</code></li><li>如果相等，则返回 <code>304 Not Modified</code> 响应</li></ul></li><li>由于 <code>max-age</code> 优先级高于 <code>Expires</code>, <code>Etag</code> 优先级 高于 <code>Last-Modified</code>,就算添加上了第二个流程的头部，也不会起作用</li></ul><h3 id="以上方案的问题以及解决思路"><a href="#以上方案的问题以及解决思路" class="headerlink" title="以上方案的问题以及解决思路"></a>以上方案的问题以及解决思路</h3><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ul><li>max-age | Expires 不过期，浏览器是没办法<code>主动感知</code>服务器的文件变化</li><li>从 HTTP 协议本身上就很难解决</li></ul><h4 id="解决策略"><a href="#解决策略" class="headerlink" title="解决策略"></a>解决策略</h4><p><strong>hash 缓存</strong></p><p>通过<code>不缓存 html</code> 为静态文件添加 <code>hash标识</code> 如果文件内容变动了，则文件名也变动</p><p>解决浏览器无法跳过过期时间，主动感知文件变化的问题。</p><p>从根本上解决，浏览器过期时间没到浏览器不能主动请求服务器的问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/xx-JFKDFJKKSJDKFKJSDKF.js?&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="浏览器的操作对缓存的影响"><a href="#浏览器的操作对缓存的影响" class="headerlink" title="浏览器的操作对缓存的影响"></a>浏览器的操作对缓存的影响</h2><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>地址栏回车,页面跳转，前进后退</td><td>没啥用</td></tr><tr><td>F5 刷新</td><td>Expires、Cache-Contrl 失效</td></tr><tr><td>Ctrl + F5</td><td>Expires、Cache-Contrl &amp; Last-Modified、Etag 失效</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>http</tag>
      
      <tag>cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
